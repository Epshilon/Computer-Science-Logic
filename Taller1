Module boolean.
Inductive bool: Type :=
  |true
  |false.

Definition bnand (b1:bool)(b2:bool) : bool :=
  match b1,b2 with
  | true, true => false
  | _, _ => true
  end.

(*definicion de negacion*)
Definition neg (b:bool) : bool :=
  match b with
  | true => false
  | false => true
  end.

(*definicion de conjuncion*)
Definition and (b1:bool) (b2:bool) : bool :=
  match b1 with
  | true => b2
  | false => false
  end.

Definition Bnand (b1:bool)(b2:bool) : bool :=
  match (and b1 b2) with
  | true => false
  | false => true
  end.

Compute bnand true true.

(*Ejemplos (00, 01, 10, 11)*)

(*00*)
Example testbnand00: (bnand false false) = true.
Proof. simpl. reflexivity. Qed.

(*01*)
Example testbnand01: (bnand false true) = true.
Proof. simpl. reflexivity. Qed.

(*10*)
Example testbnand10: (bnand true false) = true.
Proof. simpl. reflexivity. Qed.

(*11*)
Example testbnand11: (bnand true true) = false.
Proof. simpl. reflexivity. Qed.

Compute Bnand true true.

Example testBnand01: (Bnand true true) = false.
Proof. simpl. reflexivity. Qed.


End boolean.




Module Natural.
Inductive nat : Type :=
  | O
  | S (n : nat).

Definition pred(n :nat) : nat :=
  match n with
  | O => O
  | S n' => n'
  end.

End Natural.

Definition subdir (d:nat): nat :=
  match d with
  |0 => pred(271)
  |d => pred(d-90)
  end.

Compute subdir 0.
Compute subdir 90.
Compute subdir 180.
Compute subdir 270.

(*. Defina una funci´on que reciba un numero natural y retorne el resultado
de restarle 2 a ese numero. Para esto utilice la definici´on de sucesor para
n´umeros naturales. En caso que la entrada sea 0 o 1, la funci´on debe
retornar 0.*)

Definition subtwo (n: nat) : nat := 
  match n with
  |0 => 0
  |1 => 0
  |_ => (pred(n)-1)
  end.

Compute subtwo 0.

(* Definir una funci´on que reciba dos funciones y retorne la composici´on de
ambas. (Tener en cuenta que el valor de retorno es una funci´on)*)

Definition comp (nat -> nat): fun (



